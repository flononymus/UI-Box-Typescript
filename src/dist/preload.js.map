{"version":3,"file":"preload.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,ECShC,MAAM,cAAEC,EAAa,YAAEC,GDNvB,SAASC,EAAoBC,GAE5B,IAAIC,EAAeL,EAAyBI,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaP,QAGrB,IAAID,EAASG,EAAyBI,GAAY,CAGjDN,QAAS,CAAC,GAOX,OAHAS,EAAoBH,GAAUP,EAAQA,EAAOC,QAASK,GAG/CN,EAAOC,OACf,CCZuC,CAAQ,KAC/CG,EAAcO,kBAAkB,WAAY,CACxCN,YAAaA,IAEjBD,EAAcO,kBAAkB,WAAY,CACxCC,OAAQ,IAAMP,EAAYQ,OAAO,oBACjCC,OAAQ,IAAMT,EAAYQ,OAAO,oBACjCE,eAAgB,IAAMV,EAAYQ,OAAO,+B","sources":["webpack://ui-box/external node-commonjs \"electron\"","webpack://ui-box/webpack/bootstrap","webpack://ui-box/./src/preload.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n/**\n * The preload script runs before `index.html` is loaded\n * in the renderer. It has access to web APIs as well as\n * Electron's renderer process modules and some polyfilled\n * Node.js functions.\n *\n * https://www.electronjs.org/docs/latest/tutorial/sandbox\n */\n// const { contextBridge, ipcRenderer} = require('electron/renderer')\nconst { contextBridge, ipcRenderer } = require('electron');\ncontextBridge.exposeInMainWorld('electron', {\n    ipcRenderer: ipcRenderer,\n});\ncontextBridge.exposeInMainWorld('darkMode', {\n    toggle: () => ipcRenderer.invoke('dark-mode:toggle'),\n    system: () => ipcRenderer.invoke('dark-mode:system'),\n    getThemeSource: () => ipcRenderer.invoke('dark-mode:get-theme-source'),\n    // onThemeChange: (callback: () => void) => ipcRenderer.on('theme-changed', callback)\n});\n"],"names":["module","exports","require","__webpack_module_cache__","contextBridge","ipcRenderer","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","exposeInMainWorld","toggle","invoke","system","getThemeSource"],"sourceRoot":""}